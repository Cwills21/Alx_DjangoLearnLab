"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# Security Measures

- DEBUG=False and ALLOWED_HOSTS set to production domains.
- Browser XSS filter and no-sniff headers enabled.
- CSRF and session cookies forced over HTTPS.
- X_FRAME_OPTIONS='DENY' to prevent clickjacking.
- All forms include `{% csrf_token %}`.
- ORM queries used to prevent SQL injection.
- Input validated with Django forms.
- Content Security Policy headers applied using django-csp middleware.


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_x5_b=7#)jnov*ej8o^oe^@he93r7$^=4weaj4&0#30iwyoq$m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    'accounts',
    'csp',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'
LOGIN_REDIRECT_URL = 'list_books'    # or whichever view to redirect after login
LOGOUT_REDIRECT_URL = 'login'        # optional, after logout

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# AUTH_USER_MODEL = 'bookshelf.CustomUser'
AUTH_USER_MODEL = 'accounts.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LibraryProject/settings.py

DEBUG = False  # Never True in production

ALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com']  # adjust to your server domain/IP

# Browser XSS filter & no-sniff headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# üîê Security-related headers
X_FRAME_OPTIONS = 'DENY'  # protect against clickjacking
SECURE_CONTENT_TYPE_NOSNIFF = True  # prevent MIME-type sniffing

# (Older Django had SECURE_BROWSER_XSS_FILTER, removed in Django 4+
# Instead use Content Security Policy (CSP) or custom middleware)
# Clickjacking protection
X_FRAME_OPTIONS = 'DENY'  # or 'SAMEORIGIN' if you use iframes internally

# Ensure cookies only over HTTPS
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
# (Optional) HSTS to enforce HTTPS:
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# üîê Enforce HTTPS everywhere
SECURE_SSL_REDIRECT = True  # Redirect all HTTP to HTTPS


INSTALLED_APPS += ['csp']

MIDDLEWARE.insert(0, 'csp.middleware.CSPMiddleware')  # must be early

CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", 'https://trusted.cdn.com')  # add allowed script domains
CSP_STYLE_SRC = ("'self'", 'https://trusted.cdn.com')   # add allowed CSS domains
MIDDLEWARE = [
    # ...
    'LibraryProject.middleware.CSPMiddleware',
]

# Example CSP policy
# CSP_STYLE_SRC = ("'self'", 'https://fonts.googleapis.com')
